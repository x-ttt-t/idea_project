
// q (modulus)
var qE2 = [{{.Fp.NbWords}}]uint64{
	{{- range $i := .Fp.NbWordsIndexesFull}}
	{{index $.Fp.Q $i}},{{end}}
}

// q'[0], see montgommery multiplication algorithm
var (
	qE2Inv0 uint64 = {{index $.Fp.QInverse 0}}
	_ = qE2Inv0 // used in asm
)


//go:noescape
func addE2(res,x,y *E2)

//go:noescape
func subE2(res,x,y *E2)

//go:noescape
func doubleE2(res,x *E2)

//go:noescape
func negE2(res,x *E2)

{{if eq .Name "bn256"}}

//go:noescape
func mulNonResE2(res, x *E2)

//go:noescape
func squareAdxE2(res, x *E2)

//go:noescape
func mulAdxE2(res, x, y *E2)

// MulByNonResidue multiplies a E2 by (9,1)
func (z *E2) MulByNonResidue(x *E2) *E2 {
	mulNonResE2(z, x)
	return z
}

// Mul sets z to the E2-product of x,y, returns z
func (z *E2) Mul(x, y *E2) *E2 {
	mulAdxE2(z, x, y)
	return z
}

// Square sets z to the E2-product of x,x, returns z
func (z *E2) Square(x *E2) *E2 {
	squareAdxE2(z, x)
	return z
}

{{else if eq .Name "bls381"}}

//go:noescape
func mulNonResE2(res, x *E2)

//go:noescape
func squareAdxE2(res, x *E2)

//go:noescape
func mulAdxE2(z, x, y *E2)

// Mul sets z to the E2-product of x,y, returns z
func (z *E2) Mul(x, y *E2) *E2 {
	mulAdxE2(z, x, y)
	return z
}


// MulByNonResidue multiplies a E2 by (1,1)
func (z *E2) MulByNonResidue(x *E2) *E2 {
	mulNonResE2(z, x)
	return z
}
// Square sets z to the E2-product of x,x, returns z
func (z *E2) Square(x *E2) *E2 {
	squareAdxE2(z, x)
	return z
}

{{end}}
